!function(){"use strict";const e={baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"4c60eaef-36e2-498d-8440-907e9f786db6","Content-Type":"application/json"}};class t{constructor(e,t,s,r,i){this.cardName=e.cardName,this.cardLink=e.cardLink,this.id=e._id,this.isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this.id,this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this.id,this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this)}))}handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_enabled")}deleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardTemplate=document.querySelector(this._cardSelector).content.querySelector(".card"),this._cardElement=this._cardTemplate.cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this.isLiked&&this._likeButton.classList.add("card__like-button_enabled"),this._cardTitleEl.textContent=this.cardName,this._cardImageEl.setAttribute("src",this.cardLink),this._cardImageEl.setAttribute("alt",this.cardName),this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}disableButton(){return this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){return this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){return this._hasInvalidInput()?this.disableButton():this._enableButton()}resetValidation(){this.disableButton(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=document.querySelector(`${t}-close`)}open(){this._popupElement.classList.add("modal_opened"),window.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("click",this._handleOverlayClick)}close(){this._popupElement.classList.remove("modal_opened"),window.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleOverlayClick)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleOverlayClick=e=>{e.target.classList.contains("modal_opened")&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close()))}}class i extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputSelector=".modal__input",this._inputList=[...this._popupForm.querySelectorAll(this._inputSelector)],this._submitButton=this._popupForm.querySelector(".modal__save-button"),this._handleFormSubmit=t}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._handleFormSubmit(this._getInputValues(),this._submitButton)})),super.setEventListeners()}}const n=document.querySelector(".profile__image"),o=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__image__edit-button"),l=document.querySelector(".profile__add-button"),d=document.forms["edit-profile-image-form"],u=document.forms["add-card-form"],c=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleRes=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);_request(e,t){return fetch(e,t).then(this._handleRes)}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}setUserInfo=e=>{let{userName:t,userJob:s}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>e))};addNewCard=e=>{let{cardName:t,cardLink:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then((e=>e))};deleteCard=e=>this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers});likeCard=e=>this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers});removeLike=e=>this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers});editProfileImg=e=>this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}({baseUrl:e.baseUrl,headers:e.headers}),h=new class{constructor(e,t){let{userName:s,userJob:r,userImg:i}=e;this.userName=document.querySelector(s),this.userJob=document.querySelector(r),this.userImg=i,this._userImgEl=t}getUserInfo(){return this._userInfo={userName:this.userName.textContent,userJob:this.userJob.textContent,userImg:this.userImg},this._userInfo}setUserInfo(e){let{userName:t,userJob:s,userImg:r}=e;this.userName.textContent=t,this.userJob.textContent=s,this._userImgEl.src=r}}({userName:".profile__name",userJob:".profile__description"},n);c.getUserInfo().then((e=>{h.setUserInfo({userName:e.name,userJob:e.about,userImg:e.avatar})})).catch((e=>{console.error("Failed to receive user info",e)}));const _=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e,t){e.forEach((e=>this._renderer(e,t)))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";this._container[t](e)}}({renderer:(e,s)=>{e.link&&(e.cardLink=e.link),e.name&&(e.cardName=e.name);const r=function(e){return new t(e,"#card-template",L,k,m).getView()}(e);_.addItem(r,s)}},".cards__list");function m(e,t){t.isLiked?c.removeLike(e).then((e=>{t.handleLikeIcon(),t.isLiked=e.isLiked})).catch((e=>{console.error("Failed to remove like from card",e)})):c.likeCard(e).then((e=>{t.handleLikeIcon(),t.isLiked=e.isLiked})).catch((e=>{console.error("Failed to like card",e)}))}c.getInitialCards().then((e=>{_.renderItems(e,"append")})).catch((e=>{console.error("Failed to receive card data",e)}));const p=new class extends r{constructor(e){super({popupSelector:e}),this._popupImage=this._popupElement.querySelector(".modal__preview-image"),this._popupText=this._popupElement.querySelector(".modal__preview-text")}open(e){let{cardName:t,cardLink:s}=e;this._popupImage.setAttribute("src",s),this._popupImage.setAttribute("alt",t),this._popupText.textContent=t,super.open()}}("#preview-modal"),E=new i("#profile-modal",(function(e,t){c.setUserInfo(e).then((e=>{h.setUserInfo({userName:e.name,userJob:e.about,userImg:e.avatar}),E.close()})).catch((e=>{console.error("Failed to save changes in user info",e)})).finally((()=>{t.textContent="Save"}))})),v=new i("#edit-profile-image-modal",(function(e,t){c.editProfileImg(e.imageLink).then((e=>{e&&e.avatar&&h.setUserInfo({userName:e.name,userJob:e.about,userImg:e.avatar}),v.close(),d.reset(),I["edit-profile-image-form"].disableButton()})).catch((e=>{console.error("Failed to update profile image:",e)})).finally((()=>{t.textContent="Save"}))})),b=new i("#add-modal",(function(e,t){c.addNewCard(e).then((e=>{_.renderItems([e],"prepend"),b.close(),u.reset(),I["add-card-form"].disableButton()})).catch((e=>{console.error("Failed to add new card",e)})).finally((()=>{t.textContent="Create"}))})),f=new class extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this.handleFormSubmit=t}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this.handleFormSubmit(this.cardId,this.card)})),super.setEventListeners()}}("#delete-modal",(function(e,t){c.deleteCard(e).then((()=>{t.deleteCard(),f.close()})).catch((e=>{console.error("Failed to delete card",e)}))}));function L(e){p.open(e)}function k(e,t){f.open(),f.card=t,f.cardId=e}p.setEventListeners(),E.setEventListeners(),v.setEventListeners(),b.setEventListeners(),f.setEventListeners(),o.addEventListener("click",(()=>{I["profile-form"].resetValidation();const e=h.getUserInfo();E.setInputValues(e),E.open()})),a.addEventListener("click",(()=>{v.open()})),l.addEventListener("click",(()=>{b.open()}));const I={};var S;S={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},[...document.querySelectorAll(S.formSelector)].forEach((e=>{const t=new s(S,e),r=e.getAttribute("name");I[r]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,